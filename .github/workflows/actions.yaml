name: Poetry Publish and Documentation Workflow

on:
  push:
    branches:
      - test
      - main
      - docs

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Replace with your desired version
      - name: Install Poetry and dependencies
        run: |
          python -m pip install poetry
          poetry install
      - name: Test poetry version
        run: poetry --version
      - name: Check Poetry project
        run: poetry config
      - name: Install mkdocs
        run: python -m pip install mkdocs

  publish-dry-run:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'  # Only run on the test branch
    steps:
      - uses: actions/checkout@v3
      - name: Configure Poetry for testpypi
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PIPY_KEY }}
      - name: Patch version
        run: poetry version patch
      - name: Run Poetry Publish dry-run
        run: poetry publish -r testpypi --build --dry-run

  publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on the main branch
    steps:
      - uses: actions/checkout@v3
      - name: Configure Poetry for PyPI
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_KEY }}  # Use the correct secret for PyPI
      - name: Patch version
        run: poetry version patch
      - name: Publish to PyPI
        run: poetry publish

  publish_new_docs:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/docs'  # Only run on the docs branch
    steps:
      - uses: actions/checkout@v3
      - name: Build new documentation
        run: mkdocs build
      - name: Publish new documentation
        run: mkdocs gh-deploy

