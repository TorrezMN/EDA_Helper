{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>EDA Home About Features</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"eda_helper/","title":"Module milanesas.eda_helper","text":""},{"location":"eda_helper/#functions","title":"Functions","text":"<p><code>explode_pie(pie_size)</code> :   Generates a list of values to explode slices of a pie chart.</p> <pre><code>Creates a list of random values between 0.01 and 0.05, suitable for\nvisually exploding slices of a pie chart. The number of values in the\nlist is determined by the `pie_size` argument.\n\nArgs:\n    pie_size: An integer representing the number of slices in the pie chart.\n\nReturns:\n    A list of floating-point values between 0.01 and 0.05, with a length\n    equal to `pie_size`.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; imp_df = pd.DataFrame({'A': [10, 20, 30]})\n    &gt;&gt;&gt; explode_values = explode_pie(imp_df.size)\n    &gt;&gt;&gt; print(explode_values)  # Example output: [0.03546542, 0.01237543, 0.04892357]\n</code></pre> <p><code>get_column_uniques(df, col)</code> :   Prints unique values in a DataFrame column, handling semicolon-separated lists.</p> <pre><code>Prints the unique values found within a specified column of a DataFrame.\nTreats semicolon-separated values within cells as individual elements.\n\nArgs:\n    df (pandas.DataFrame): The DataFrame to analyze.\n    col (str): The name of the column to extract unique values from.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'exp_en_IT': ['A;B;C', 'A;B', 'D']})\n    &gt;&gt;&gt; print_column_uniques(df, \"exp_en_IT\")\n    {'A', 'B', 'C', 'D'}\n</code></pre> <p><code>get_normal_uniques_col_count(df, col)</code> :   Counts occurrences of unique values (including those within semicolon-separated lists), normalizing counts by row count.</p> <pre><code>Calculates the count of each unique value within a specified column of a DataFrame,\nhandling cases where cells contain multiple values separated by semicolons. Normalizes\nthe counts by dividing them by the total number of rows in the DataFrame.\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame.\n    col (str): The name of the column to analyze.\n\nReturns:\n    dict: A dictionary where keys represent unique values from the column and values\n        represent their normalized counts (fraction of total rows).\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'educacion': ['A;B', 'A', 'A;C', 'B']})\n    &gt;&gt;&gt; normalized_counts = get_normal_uniques_col_count(df, \"educacion\")\n    &gt;&gt;&gt; print(normalized_counts)\n    {'A': 0.75, 'B': 0.5, 'C': 0.25}\n</code></pre> <p><code>get_percentage(value)</code> :   Formats a value as a percentage string.</p> <pre><code>Converts a numerical value into a percentage representation, rounded to the\nnearest integer, and returns it as a formatted string with a percentage sign.\n\nArgs:\n    value (float): The numerical value to convert to a percentage.\n\nReturns:\n    str: The formatted percentage string (e.g., \"42%\").\n\nExample:\n    &gt;&gt;&gt; percentage_string = get_percentage(0.4235)\n    &gt;&gt;&gt; print(percentage_string)  # Output: \"42%\"\n</code></pre> <p><code>get_uniques_col_count(df, col)</code> :   Counts occurrences of unique values (including those within semicolon-separated lists).</p> <pre><code>Calculates the count of each unique value within a specified column of a DataFrame,\nhandling cases where cells contain multiple values separated by semicolons.\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame.\n    col (str): The name of the column to analyze.\n\nReturns:\n    dict: A dictionary where keys represent unique values from the column and values\n        represent their counts.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'educacion': ['A;B', 'A', 'A;C', 'B']})\n    &gt;&gt;&gt; counts = get_uniques_col_count(df, \"educacion\")\n    &gt;&gt;&gt; print(counts)\n    {'A': 3, 'B': 2, 'C': 1}\n</code></pre> <p><code>make_custom_horizontal_bar(df, col, titulo, x_label, y_label, legend)</code> :   Creates a horizontal bar chart from a pre-formatted DataFrame.</p> <pre><code>Generates a horizontal bar chart from a DataFrame that's already been prepared\nwith specific column names (\"Category\" for categories and \"count\" for values).\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame, containing a 'Category' column\n                            and a 'count' column.\n    col (str): Unused in this function, but kept for consistency with other\n                charting functions.\n    titulo (str): The title of the chart.\n    x_label (str): The label for the x-axis.\n    y_label (str): The label for the y-axis.\n    legend (bool): True to display a legend, False to hide it.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'Category': ['A', 'B', 'A', 'C'], 'count': [4, 2, 3, 1]})\n    &gt;&gt;&gt; make_custom_horizontal_bar(df, \"col\", \"Carreras o especialidades\", \"Total\", \"Carreras / Especialidades\", False)\n</code></pre> <p><code>make_dataframe(df, col, cat_col, count_col)</code> :   </p> <p><code>make_df(df, col, x_label, y_label)</code> :   Creates a DataFrame counting occurrences of unique values (including those within semicolon-separated lists).</p> <pre><code>Constructs a new DataFrame that tallies the number of occurrences of each unique\nvalue within a specified column of a given DataFrame. Handles cases where cells\ncontain multiple values separated by semicolons.\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame.\n    col (str): The name of the column to analyze.\n    x_label (str): The label for the column containing unique values in the output DataFrame.\n    y_label (str): The label for the column containing counts in the output DataFrame.\n\nReturns:\n    pandas.DataFrame: A new DataFrame with two columns:\n        - x_label: Contains the unique values from the specified column.\n        - y_label: Contains the counts of those values.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'educacion': ['A;B', 'A', 'C;B', 'D']})\n    &gt;&gt;&gt; new_df = make_df(df, \"educacion\", \"categories\", \"count\")\n    &gt;&gt;&gt; print(new_df)\n   categories  count\n    0          A      2\n    1          B      2\n    2          C      1\n    3          D      1\n</code></pre> <p><code>make_horizontal_bar(df, col, titulo, x_label, y_label, legend)</code> :   Creates a horizontal bar chart for a specified column in a DataFrame.</p> <pre><code>Generates a horizontal bar chart that visualizes the counts of unique values\nwithin a given column of a DataFrame.\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame.\n    col (str): The name of the column to visualize.\n    titulo (str): The title of the chart.\n    x_label (str): The label for the x-axis.\n    y_label (str): The label for the y-axis.\n    legend (bool): True to display a legend, False to hide it.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'carr_especialidades': ['A', 'B', 'A', 'C', 'B']})\n    &gt;&gt;&gt; make_horizontal_bar(df, \"carr_especialidades\", \"Carreras o especialidades\", \"Total\", \"Carreras / Especialidades\", False)\n</code></pre> <p><code>make_horizontal_grouped_chart(df, g1, g2, col, labels, config)</code> :   Creates a horizontal grouped bar chart comparing values between two groups.</p> <pre><code>Generates a horizontal bar chart with two sets of bars, one for each group\n(g1 and g2), comparing their counts for unique values in a specified column.\nLabels, title, and other chart elements are customized using a configuration\ndictionary.\n\nArgs:\n    df (pandas.DataFrame): The DataFrame containing the data.\n    g1 (pandas.DataFrame): A subset of the DataFrame representing the first group.\n    g2 (pandas.DataFrame): A subset of the DataFrame representing the second group.\n    col (str): The name of the column to compare values for.\n    labels (list): A list of unique values from the column to use as labels.\n    config (dict): A configuration dictionary with keys:\n        - title (str): The title of the chart.\n        - c1_label (str): The label for the first group's bars.\n        - c2_label (str): The label for the second group's bars.\n        - xlabel (str): The label for the x-axis.\n        - ylabel (str): The label for the y-axis.\n\nRaises:\n    ValueError: If the specified column does not exist in the DataFrame.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'exp_en_IT': ['A', 'B', 'A', 'C', 'B'], 'gender': ['MAN', 'WOMAN', 'MAN', 'MAN', 'WOMAN']})\n    &gt;&gt;&gt; gen = df.groupby('gender')\n    &gt;&gt;&gt; group_config = {\n    ...     'title': \"exp_en_IT by Gender\",\n    ...     'c1_label': \"MAN\",\n    ...     'c2_label': \"WOMAN\",\n    ...     'xlabel': \"Count\",\n    ...     'ylabel': \"exp_en_IT level\"\n    ... }\n    &gt;&gt;&gt; make_horizontal_grouped_chart(df, gen.get_group(\"MAN\"), gen.get_group(\"WOMAN\"), \"exp_en_IT\", df[\"exp_en_IT\"].unique(), group_config)\n</code></pre> <p><code>make_normalized_df(df, col)</code> :   Creates a DataFrame with normalized counts of unique values, handling semicolon-separated lists.</p> <pre><code>Constructs a new DataFrame that displays the percentage of occurrences for each unique\nvalue within a specified column of a given DataFrame. Values in cells can be separated\nby semicolons, and each unique value within a semicolon-separated list is counted\nseparately.\n\nArgs:\n    df (pandas.DataFrame): The input DataFrame.\n    col (str): The name of the column to analyze.\n\nReturns:\n    pandas.DataFrame: A new DataFrame with two columns:\n        - categories: Contains the unique values from the specified column.\n        - total count: Contains the percentage of occurrences for each unique value.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'imp_ed_formal': ['A;B', 'A', 'C;B', 'A;B']})\n    &gt;&gt;&gt; normalized_counts = make_normalized_df(df, \"imp_ed_formal\")\n    &gt;&gt;&gt; print(normalized_counts)\n          total count\n    categories\n    A           50.0\n    B           50.0\n    C           25.0\n</code></pre> <p><code>make_vertical_grouped_chart(df, g1, g2, col, labels, config)</code> :   Creates a vertical grouped bar chart comparing values between two groups.</p> <pre><code>Generates a vertical bar chart with two sets of bars, one for each group\n(g1 and g2), comparing their counts for unique values in a specified column.\nLabels, title, and other chart elements are customized using a configuration\ndictionary.\n\nArgs:\n    df (pandas.DataFrame): The DataFrame containing the data.\n    g1 (pandas.DataFrame): A subset of the DataFrame representing the first group.\n    g2 (pandas.DataFrame): A subset of the DataFrame representing the second group.\n    col (str): The name of the column to compare values for.\n    labels (list): A list of unique values from the column to use as labels.\n    config (dict): A configuration dictionary with keys:\n        - title (str): The title of the chart.\n        - c1_label (str): The label for the first group's bars.\n        - c2_label (str): The label for the second group's bars.\n        - xlabel (str): The label for the x-axis.\n        - ylabel (str): The label for the y-axis.\n\nRaises:\n    ValueError: If the specified column does not exist in the DataFrame.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'edad_actual': [25, 30, 30, 25, 35], 'gender': ['MAN', 'WOMAN', 'MAN', 'MAN', 'WOMAN']})\n    &gt;&gt;&gt; gen = df.groupby('gender')\n    &gt;&gt;&gt; group_config = {\n    ...     'title': \"edad_actual by Gender\",\n    ...     'c1_label': \"Hombres\",\n    ...     'c2_label': \"Mujeres\",\n    ...     'xlabel': \"edad_actual level\",\n    ...     'ylabel': \"Count\"\n    ... }\n    &gt;&gt;&gt; make_vertical_grouped_chart(df, gen.get_group(\"MAN\"), gen.get_group(\"WOMAN\"), \"edad_actual\", df[\"edad_actual\"].unique(), group_config)\n</code></pre> <p><code>percentage_to_normal(val)</code> :   Formats a Series of percentage values with rounding and percentage sign.</p> <pre><code>Converts a Series of values to percentages, rounds them to one decimal place,\nand adds a percentage sign. The output is formatted as a string.\n\nArgs:\n    val (pandas.Series): A Series containing numerical values.\n\nReturns:\n    pandas.Series: A Series with the same index as the input, but containing\n    formatted percentage strings.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; s = pd.Series([0.1234, 0.5678, 0.9012])\n    &gt;&gt;&gt; formatted_percentages = percentage_to_normal(s)\n    &gt;&gt;&gt; print(formatted_percentages)\n    0    12.3 %\n    1    56.8 %\n    2    90.1 %\n    dtype: object\n</code></pre> <p><code>print_column_uniques(df, col)</code> :   </p> <p><code>random_hex()</code> :   </p> <p><code>replace_column_content(df, col, repl)</code> :   Replaces values in a DataFrame column using a replacement dictionary.</p> <pre><code>Modifies a DataFrame column in-place by replacing values based on a\nprovided dictionary. The replacement dictionary maps original values to\ntheir desired replacements. Regular expressions can be used for flexible\nmatching.\n\nArgs:\n    df (pandas.DataFrame): The DataFrame to modify.\n    col (str): The name of the column to modify.\n    repl (dict): A dictionary containing replacement mappings, where keys\n        represent original values and values represent their replacements.\n\nRaises:\n    ValueError: If the specified column does not exist in the DataFrame.\n\nExample:\n    &gt;&gt;&gt; import pandas as pd\n    &gt;&gt;&gt; df = pd.DataFrame({'genero': ['HOMBRE', 'MUJER', 'NO COMPARTO']})\n    &gt;&gt;&gt; gen_repl = {\n    ...     \"HOMBRE\": \"MAN\",\n    ...     \"MUJER\": \"WOMAN\",\n    ...     \"NO COMPARTO\": \"DONT SHARE\",\n    ... }\n    &gt;&gt;&gt; replace_column_content(df, \"genero\", gen_repl)\n    &gt;&gt;&gt; print(df)  # Output:\n                   genero\n    0                 MAN\n    1              WOMAN\n    2       DONT SHARE\n</code></pre>"}]}